from flask import Flask, request, jsonify, render_template
from pymongo import MongoClient
from datetime import datetime

app = Flask(__name__, template_folder="templates")

# Configuración de MongoDB
MONGO_URI = "mongodb://localhost:27017/" 
client = MongoClient(MONGO_URI)
db = client["ambiental"]  
collection = db["sensor"]  

# Ruta para recibir datos POST desde un sensor
@app.route('/sensor/data', methods=['POST'])
def receive_data():
    try:
        # Recibir datos en formato JSON
        data = request.json
        if not data:
            return jsonify({"error": "No se proporcionaron datos"}), 400

        # Agregar marca de tiempo a los datos
        data["timestamp"] = datetime.utcnow()

        # Insertar los datos en MongoDB
        collection.insert_one(data)
        return jsonify({"message": "Datos almacenados correctamente"}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Ruta para obtener todos los datos almacenados (GET)
@app.route('/sensor/data', methods=['GET'])
def get_all_data():
    try:
        # Obtener todos los documentos de MongoDB
        data = list(collection.find({}, {"_id": 0}))  # Excluye el campo '_id'
        return jsonify(data), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Ruta para obtener el último dato almacenado
@app.route('/sensor/data/latest', methods=['GET'])
def get_latest_data():
    try:
        latest_data = collection.find_one(sort=[("timestamp", -1)], projection={"_id": 0})
        if latest_data:
            return jsonify(latest_data), 200
        else:
            return jsonify({"message": "No hay datos almacenados"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Ruta para mostrar el gráfico HTML
@app.route('/')
def show_graph():
    return render_template("index.html")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8081, debug=True)
